// Generated by Dagger (https://dagger.dev).
package com.ricardocenteno.alltrailsplaces.di;

import com.ricardocenteno.alltrailsplaces.model.network.PlaceDtoMapper;
import com.ricardocenteno.alltrailsplaces.model.network.PlacesService;
import com.ricardocenteno.alltrailsplaces.model.repository.PlaceRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideRecipeRepositoryFactory implements Factory<PlaceRepository> {
  private final Provider<PlacesService> placesServiceProvider;

  private final Provider<PlaceDtoMapper> placesMapperProvider;

  public RepositoryModule_ProvideRecipeRepositoryFactory(
      Provider<PlacesService> placesServiceProvider,
      Provider<PlaceDtoMapper> placesMapperProvider) {
    this.placesServiceProvider = placesServiceProvider;
    this.placesMapperProvider = placesMapperProvider;
  }

  @Override
  public PlaceRepository get() {
    return provideRecipeRepository(placesServiceProvider.get(), placesMapperProvider.get());
  }

  public static RepositoryModule_ProvideRecipeRepositoryFactory create(
      Provider<PlacesService> placesServiceProvider,
      Provider<PlaceDtoMapper> placesMapperProvider) {
    return new RepositoryModule_ProvideRecipeRepositoryFactory(placesServiceProvider, placesMapperProvider);
  }

  public static PlaceRepository provideRecipeRepository(PlacesService placesService,
      PlaceDtoMapper placesMapper) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideRecipeRepository(placesService, placesMapper));
  }
}
